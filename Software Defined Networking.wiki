%template math
= Software Defined Networking =
A guest lecture by Lin Wang on Thu Jun 20, 2019

feedback: bit.ly/vu-cn2019-sdn

== Basics of Layer 2 ==
a router has line cards connected to a switching fabric (data plane), and a processor (control plane).
line cards are the interfaces.
the control plane computes the path that packets will follow (e.g. OSPF - run Dijkstra on topology).
also takes care of e.g. traffic engineering (link weights to change path)

"control plane of a network is a complicated mess"

example: access control - drop packets from IP address you don't want to allow.
but what if you add a link? well you might be able to find a new path that bypasses access control.

there are people who understand this complicated mess.
the ability to master complexity is valuable, but not the same as the ability to extract simplicity.

the control plane has variety of goals, but no modularity.
it's a mechanism without abstraction.
that's why you feel like computer networks is just acronym soup.

== SDN to the rescue ==
the answer is software defined networking: a network in which the control plane is physically separate from the day plane.
a single (logically centralized) control plane controls several forwarding devices.
you have an overarching network OS that controls the devices. that way you take the intelligence out of the devices.

=== Abstractions in SDN ===
1. Forwarding abstraction:
    * express intent - independence of implementation. don't want proprietary hw/sw
    * openflow is currently proposed for forwarding
        * standardised interface to switch
        * config in terms of flow entries - <header, action>
    * design details concern exact nature of header matching & allowed actions
    * important facets:
        * switches accept external control messages (not closed/proprietary)
        * standardised flow entry format (switches are interchangeable)
2. Network state abstraction
    * something from the slides that I missed
    * centralised link-state algorithm
    * switches send connectivity info to controller
    * controller computes forwarding state
    * controller sends forwarding state to routers
3. Specification abstraction
    * control mechanism expresses desired behavior - what you want to do instead of how it'll be done
    * should not be responsible for implementing that behavior on physical network infrastructure
    * proposed abstraction - abstract view of the network

There's a clear separation of concerns:
* Control program: express goals on abstract view (driven by operator requirements)
* [[Virtualisation]] layer: abstract view <> global view (driven by spec abstraction for particular task)
* Network SO: global view <> physical switches (API provided by network state abstraction, switch interface driven by forwarding abstraction)

=== Does SDN simplify the network? ===
* Abstraction does not eliminate complexity
* But it localises complexity and pushes it into reusable code

=== Why is SDN only happening now? ===
* the idea was there for a long time (active networking in 1990s, control/data plane separation in early 200s)
* in 2008, you got openflow API and network OSes
* main reasons:
    * operators face challenges with network management, cost conscious & desire a lot of control
    * SDN is right balance between vision and pragmatism
    * you get network virtualisation

== OpenFlow basics ==
provides abstraction for forwarding plane. the devices maintain a flow table, which they get from the network OS via the openflow protocol.

match arbitrary bits in headers, on any header, or new header. allows any flow granularity.
then action - forward to ports, drop, send to controller, overwrite header with mask, forward at specific bitrate.

== The practical part ==
=== Using Mininet ===
create a topology of two nodes and one switch: `sudo mn --topo=single,2`

{{{
               ┌──────────────────┐
               │                  │
               │                  │
               │      Switch      │
               │                  │
               └───┬─────────┬────┘
                 ┌─┘         └─┐
               ┌─┘             └─┐
             ┌─┘                 └─┐
           ┌─┘                     └─┐
          ┌┘                         └─┐
         ┌┘                            └┐
┌────────┴─────────┐         ┌──────────┴───────┐
│                  │         │                  │
│                  │         │                  │
│      Host 1      │         │      Host 2      │
│                  │         │                  │
└──────────────────┘         └──────────────────┘
}}}

test the connection: `h1 ping -c 5 h2`
new window for h2: `xterm h2`
in that new window, display ARP packets: `tcpdump -n -i h2-eth0 arp`

result:

{{{class="code"
listening on h2-eth0, link-type EN10MB (Ethernet), capture size 262144 bytes
15:55:31.898660 ARP, Request who-has 10.0.0.2 tell 10.0.0.1, length 28
15:55:31.898682 ARP, Reply 10.0.0.2 is-at 9a:dc:b4:93:3d:43, length 28
15:55:36.913187 ARP, Request who-has 10.0.0.1 tell 10.0.0.2, length 28
15:55:36.915364 ARP, Reply 10.0.0.1 is-at 12:53:58:dc:5a:96, length 28
}}}


== Programming with Mininet ==
creating a broken rectangle network topology with Python

{{{
┌─────────────┐        ┌─────────────┐        ┌─────────────┐      ┌─────────────┐
│             │        │             │        │             │      │             │
│  Host 1     ├────────┤  Switch 1   ├────────┤  Switch 2   ├──────┤  Host 2     │
│             │        │             │        │             │      │             │
└─────────────┘        └─────────────┘        └─────┬───────┘      └─────────────┘
                                                    │
                                                    │
┌─────────────┐        ┌─────────────┐        ┌─────┴───────┐      ┌─────────────┐
│             │        │             │        │             │      │             │
│  Host 4     ├────────┤  Switch 4   ├────────┤  Switch 3   ├──────┤  Host 3     │
│             │        │             │        │             │      │             │
└─────────────┘        └─────────────┘        └─────────────┘      └─────────────┘
}}}

Write this and save it as `brectangle.py`.

{{{class="code lang-python"

from mininet.topo import Topo
from mininet.net import Mininet
from mininet.node import OVSSwitch, Controller, RemoteController

class RectTopo(Topo):
    def __init__(self):
        Topo.__init__(self)
        h1 = self.addHost('h1')
        h2 = self.addHost('h2')
        h3 = self.addHost('h3')
        h4 = self.addHost('h4')

        s1 = self.addSwitch('s1')
        s2 = self.addSwitch('s2')
        s3 = self.addSwitch('s3')
        s4 = self.addSwitch('s4')

        self.addLink(h1, s1)
        self.addLink(h2, s2)
        self.addLink(h3, s3)
        self.addLink(h4, s4)

        self.addLink(s1, s2)
        self.addLink(s2, s3)
        self.addLink(s3, s4)

topos = { 'recttopo': RectTopo }
}}}

Then `sudo mn --custom  brectangle.py --topo recttopo --controller remote --switch ovsk --mac`

Now if you do ping test from h1 to h2, you'll get destination host unreachable.
Why? Controller was set to remote, there's no controller. Switch doesn't know how to deal with the packet right now.
We need a controller like so:

{{{
                                     ┌─────────────────────┐
                                     │                     │
┌────────────────────────────────────┤     Controller      ├─────────────────────────────────────────┐
│                                    │                     │                                         │
│                                    └───┬───────────────┬─┘                                         │
│      ┌─────────────┐        ┌──────────┴──┐        ┌───┴─────────┐      ┌─────────────┐            │
│      │             │        │             │        │             │      │             │            │
│      │  Host 1     ├────────┤  Switch 1   ├────────┤  Switch 2   ├──────┤  Host 2     │            │
│      │             │        │             │        │             │      │             │            │
│      └─────────────┘        └─────────────┘        └─────┬───────┘      └─────────────┘            │
│                                                          │                                         │
│      ┌─────────────┐        ┌─────────────┐        ┌─────┴───────┐      ┌─────────────┐            │
│      │             │        │             │        │             │      │             │            │
│      │  Host 4     ├────────┤  Switch 4   ├────────┤  Switch 3   ├──────┤  Host 3     │            │
│      │             │        │             │        │             │      │             │            │
│      └─────────────┘        └──────┬──────┘        └───────────┬─┘      └─────────────┘            │
└────────────────────────────────────┘                           └───────────────────────────────────┘
}}}

Openflow controllers, there are a lot of them. We'll use POX here.

`sudo ./pox.py --verbose forwarding.l2_pairs`

Now you see that the hosts are connected, and if you do the ping test again, it'll reach the host.

You can see what's going on in the switches now, specifically switch 1, with `sudo ovs-ofctl dump-flows s1`.


Then restart everything.

What happens if you `h1 ping h3`? You need to translate IP to MAC, using ARP.

First, ARP request from h1 to s1.
s1 forwards the packet to the controller.
The controller learns port number of h1, then floods the packet on the network.
Packet reaches s2, controller learns link of s2 where h1 is located.
Then flooding continues.
Reaches h2, h2 drops the packet.
Reaches s3, controller learns port of s3 where h1 is located.
Then flooded again.
Once h3 gets it, h3 send back its MAC address, controller learns the port of s3 where h3 is located.
Each switch gets flow rules installed on it based on this.

Start the controller and mininet.
Open up terminals with `xterm h3 h4`.
Then run `tcpdump -n -i h3-eth0` and `tcpdump -n -i h4-eth0` in their respective xterms.
Now you can check out the output and flow tables with `ovs-ofctl dump-flows` on each switch.

We used a controller provided by POX. But how does it work?

=== Learning switch: ===
MAC address table, record mappings between MAC addresses and port numbers.
SDN: maintain a table at the controller.

Assignment - try to program a learning switch. Good C++/C exercise.
